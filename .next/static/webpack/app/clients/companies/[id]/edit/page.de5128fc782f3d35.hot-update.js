"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/clients/companies/[id]/edit/page",{

/***/ "(app-pages-browser)/./src/lib/geocodio.ts":
/*!*****************************!*\
  !*** ./src/lib/geocodio.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   verifyAddress: function() { return /* binding */ verifyAddress; }\n/* harmony export */ });\nconst GEOCODIO_API_KEY = \"2e1a28e27a228ee14e2911806a41806e1610141\";\nconst GEOCODIO_BASE_URL = \"https://api.geocod.io/v1.7/geocode\";\n// Debounce function to limit API calls\nfunction debounce(func, wait) {\n    let timeout = null;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(()=>func(...args), wait);\n    };\n}\n// Check if the address is complete enough for geocoding\nfunction isAddressComplete(address) {\n    // Split address into parts and clean them\n    const parts = address.split(\",\").map((part)=>part.trim());\n    // Need at least 3 parts: street, city, state\n    if (parts.length < 3) return false;\n    // Check if we have a street number\n    const streetPart = parts[0];\n    if (!streetPart.match(/^\\d+/)) return false;\n    // Check if we have a city\n    const cityPart = parts[1];\n    if (!cityPart) return false;\n    // Check if we have a state (2 letters or full name)\n    const statePart = parts[2];\n    if (!statePart) return false;\n    // Optional: Check if we have a zip code\n    const zipPart = parts[3];\n    if (zipPart && !zipPart.match(/^\\d{5}(-\\d{4})?$/)) return false;\n    return true;\n}\n// Format address for API call\nfunction formatAddressForApi(address) {\n    const parts = address.split(\",\").map((part)=>part.trim());\n    // Ensure we have at least street, city, and state\n    if (parts.length < 3) return address;\n    // Format the address parts\n    const street = parts[0];\n    const city = parts[1];\n    const state = parts[2];\n    const zip = parts[3] || \"\";\n    // Return formatted address\n    return \"\".concat(street, \", \").concat(city, \", \").concat(state).concat(zip ? \" \".concat(zip) : \"\");\n}\nconst verifyAddress = debounce(async (address)=>{\n    try {\n        // Only proceed if the address is complete enough\n        if (!isAddressComplete(address)) {\n            return null;\n        }\n        // Format the address for the API call\n        const formattedAddress = formatAddressForApi(address);\n        const response = await fetch(\"\".concat(GEOCODIO_BASE_URL, \"?q=\").concat(encodeURIComponent(formattedAddress), \"&api_key=\").concat(GEOCODIO_API_KEY));\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>null);\n            console.error(\"Geocodio API error:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData,\n                address: formattedAddress\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!data.results || data.results.length === 0) {\n            return null;\n        }\n        const result = data.results[0];\n        const components = result.address_components;\n        return {\n            address_line1: \"\".concat(components.number, \" \").concat(components.street),\n            city: components.city,\n            state: components.state,\n            zip: components.zip,\n            latitude: result.location.lat,\n            longitude: result.location.lng\n        };\n    } catch (error) {\n        console.error(\"Error verifying address:\", error);\n        return null;\n    }\n}, 500); // 500ms debounce delay \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/geocodio.ts\n"));

/***/ })

});