"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/clients/companies/[id]/edit/page",{

/***/ "(app-pages-browser)/./src/lib/geocodio.ts":
/*!*****************************!*\
  !*** ./src/lib/geocodio.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   verifyAddress: function() { return /* binding */ verifyAddress; }\n/* harmony export */ });\nconst GEOCODIO_API_KEY = \"2e1a28e27a228ee14e2911806a41806e1610141\";\nconst GEOCODIO_BASE_URL = \"https://api.geocod.io/v1.7/geocode\";\n// Debounce function to limit API calls\nfunction debounce(func, wait) {\n    let timeout = null;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(()=>func(...args), wait);\n    };\n}\n// Check if the address is complete enough for geocoding\nfunction isAddressComplete(address) {\n    // Check if we have at least a street number and name\n    const parts = address.split(\",\").map((part)=>part.trim());\n    if (parts.length < 2) return false;\n    // Check if we have a city and state\n    const cityState = parts[1].trim();\n    if (!cityState) return false;\n    return true;\n}\nconst verifyAddress = debounce(async (address)=>{\n    try {\n        // Only proceed if the address is complete enough\n        if (!isAddressComplete(address)) {\n            return null;\n        }\n        const response = await fetch(\"\".concat(GEOCODIO_BASE_URL, \"?q=\").concat(encodeURIComponent(address), \"&api_key=\").concat(GEOCODIO_API_KEY));\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>null);\n            console.error(\"Geocodio API error:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: errorData\n            });\n            return null;\n        }\n        const data = await response.json();\n        if (!data.results || data.results.length === 0) {\n            return null;\n        }\n        const result = data.results[0];\n        const components = result.address_components;\n        return {\n            address_line1: \"\".concat(components.number, \" \").concat(components.street),\n            city: components.city,\n            state: components.state,\n            zip: components.zip,\n            latitude: result.location.lat,\n            longitude: result.location.lng\n        };\n    } catch (error) {\n        console.error(\"Error verifying address:\", error);\n        return null;\n    }\n}, 500); // 500ms debounce delay \n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvZ2VvY29kaW8udHMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLG1CQUFtQkMseUNBQXdDO0FBQ2pFLE1BQU1HLG9CQUFvQjtBQTZCMUIsdUNBQXVDO0FBQ3ZDLFNBQVNDLFNBQTRDQyxJQUFPLEVBQUVDLElBQVk7SUFDeEUsSUFBSUMsVUFBaUM7SUFDckMsT0FBTzt5Q0FBSUM7WUFBQUE7O1FBQ1QsSUFBSUQsU0FBU0UsYUFBYUY7UUFDMUJBLFVBQVVHLFdBQVcsSUFBTUwsUUFBUUcsT0FBT0Y7SUFDNUM7QUFDRjtBQUVBLHdEQUF3RDtBQUN4RCxTQUFTSyxrQkFBa0JDLE9BQWU7SUFDeEMscURBQXFEO0lBQ3JELE1BQU1DLFFBQVFELFFBQVFFLEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUNDLENBQUFBLE9BQVFBLEtBQUtDLElBQUk7SUFDdEQsSUFBSUosTUFBTUssTUFBTSxHQUFHLEdBQUcsT0FBTztJQUU3QixvQ0FBb0M7SUFDcEMsTUFBTUMsWUFBWU4sS0FBSyxDQUFDLEVBQUUsQ0FBQ0ksSUFBSTtJQUMvQixJQUFJLENBQUNFLFdBQVcsT0FBTztJQUV2QixPQUFPO0FBQ1Q7QUFFTyxNQUFNQyxnQkFBZ0JoQixTQUFTLE9BQU9RO0lBUzNDLElBQUk7UUFDRixpREFBaUQ7UUFDakQsSUFBSSxDQUFDRCxrQkFBa0JDLFVBQVU7WUFDL0IsT0FBTztRQUNUO1FBRUEsTUFBTVMsV0FBVyxNQUFNQyxNQUNyQixHQUEwQkMsT0FBdkJwQixtQkFBa0IsT0FBNENKLE9BQXZDd0IsbUJBQW1CWCxVQUFTLGFBQTRCLE9BQWpCYjtRQUduRSxJQUFJLENBQUNzQixTQUFTRyxFQUFFLEVBQUU7WUFDaEIsTUFBTUMsWUFBWSxNQUFNSixTQUFTSyxJQUFJLEdBQUdDLEtBQUssQ0FBQyxJQUFNO1lBQ3BEQyxRQUFRQyxLQUFLLENBQUMsdUJBQXVCO2dCQUNuQ0MsUUFBUVQsU0FBU1MsTUFBTTtnQkFDdkJDLFlBQVlWLFNBQVNVLFVBQVU7Z0JBQy9CRixPQUFPSjtZQUNUO1lBQ0EsT0FBTztRQUNUO1FBRUEsTUFBTU8sT0FBeUIsTUFBTVgsU0FBU0ssSUFBSTtRQUVsRCxJQUFJLENBQUNNLEtBQUtDLE9BQU8sSUFBSUQsS0FBS0MsT0FBTyxDQUFDZixNQUFNLEtBQUssR0FBRztZQUM5QyxPQUFPO1FBQ1Q7UUFFQSxNQUFNZ0IsU0FBU0YsS0FBS0MsT0FBTyxDQUFDLEVBQUU7UUFDOUIsTUFBTUUsYUFBYUQsT0FBT0Usa0JBQWtCO1FBRTVDLE9BQU87WUFDTEMsZUFBZSxHQUF3QkYsT0FBckJBLFdBQVdHLE1BQU0sRUFBQyxLQUFxQixPQUFsQkgsV0FBV0ksTUFBTTtZQUN4REMsTUFBTUwsV0FBV0ssSUFBSTtZQUNyQkMsT0FBT04sV0FBV00sS0FBSztZQUN2QkMsS0FBS1AsV0FBV08sR0FBRztZQUNuQkMsVUFBVVQsT0FBT1UsUUFBUSxDQUFDQyxHQUFHO1lBQzdCQyxXQUFXWixPQUFPVSxRQUFRLENBQUNHLEdBQUc7UUFDaEM7SUFDRixFQUFFLE9BQU9sQixPQUFPO1FBQ2RELFFBQVFDLEtBQUssQ0FBQyw0QkFBNEJBO1FBQzFDLE9BQU87SUFDVDtBQUNGLEdBQUcsS0FBSyxDQUFDLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbGliL2dlb2NvZGlvLnRzP2NjZTYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgR0VPQ09ESU9fQVBJX0tFWSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0dFT0NPRElPX0FQSV9LRVk7XHJcbmNvbnN0IEdFT0NPRElPX0JBU0VfVVJMID0gJ2h0dHBzOi8vYXBpLmdlb2NvZC5pby92MS43L2dlb2NvZGUnO1xyXG5cclxuaW50ZXJmYWNlIEdlb2NvZGlvUmVzcG9uc2Uge1xyXG4gIGlucHV0OiB7XHJcbiAgICBhZGRyZXNzX2NvbXBvbmVudHM6IHtcclxuICAgICAgbnVtYmVyOiBzdHJpbmc7XHJcbiAgICAgIHN0cmVldDogc3RyaW5nO1xyXG4gICAgICBjaXR5OiBzdHJpbmc7XHJcbiAgICAgIHN0YXRlOiBzdHJpbmc7XHJcbiAgICAgIHppcDogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIGZvcm1hdHRlZF9hZGRyZXNzOiBzdHJpbmc7XHJcbiAgfTtcclxuICByZXN1bHRzOiBBcnJheTx7XHJcbiAgICBhZGRyZXNzX2NvbXBvbmVudHM6IHtcclxuICAgICAgbnVtYmVyOiBzdHJpbmc7XHJcbiAgICAgIHN0cmVldDogc3RyaW5nO1xyXG4gICAgICBjaXR5OiBzdHJpbmc7XHJcbiAgICAgIHN0YXRlOiBzdHJpbmc7XHJcbiAgICAgIHppcDogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIGxvY2F0aW9uOiB7XHJcbiAgICAgIGxhdDogbnVtYmVyO1xyXG4gICAgICBsbmc6IG51bWJlcjtcclxuICAgIH07XHJcbiAgICBhY2N1cmFjeTogbnVtYmVyO1xyXG4gIH0+O1xyXG59XHJcblxyXG4vLyBEZWJvdW5jZSBmdW5jdGlvbiB0byBsaW1pdCBBUEkgY2FsbHNcclxuZnVuY3Rpb24gZGVib3VuY2U8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihmdW5jOiBULCB3YWl0OiBudW1iZXIpOiAoLi4uYXJnczogUGFyYW1ldGVyczxUPikgPT4gdm9pZCB7XHJcbiAgbGV0IHRpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0IHwgbnVsbCA9IG51bGw7XHJcbiAgcmV0dXJuICguLi5hcmdzOiBQYXJhbWV0ZXJzPFQ+KSA9PiB7XHJcbiAgICBpZiAodGltZW91dCkgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gZnVuYyguLi5hcmdzKSwgd2FpdCk7XHJcbiAgfTtcclxufVxyXG5cclxuLy8gQ2hlY2sgaWYgdGhlIGFkZHJlc3MgaXMgY29tcGxldGUgZW5vdWdoIGZvciBnZW9jb2RpbmdcclxuZnVuY3Rpb24gaXNBZGRyZXNzQ29tcGxldGUoYWRkcmVzczogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgLy8gQ2hlY2sgaWYgd2UgaGF2ZSBhdCBsZWFzdCBhIHN0cmVldCBudW1iZXIgYW5kIG5hbWVcclxuICBjb25zdCBwYXJ0cyA9IGFkZHJlc3Muc3BsaXQoJywnKS5tYXAocGFydCA9PiBwYXJ0LnRyaW0oKSk7XHJcbiAgaWYgKHBhcnRzLmxlbmd0aCA8IDIpIHJldHVybiBmYWxzZTtcclxuICBcclxuICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgY2l0eSBhbmQgc3RhdGVcclxuICBjb25zdCBjaXR5U3RhdGUgPSBwYXJ0c1sxXS50cmltKCk7XHJcbiAgaWYgKCFjaXR5U3RhdGUpIHJldHVybiBmYWxzZTtcclxuICBcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHZlcmlmeUFkZHJlc3MgPSBkZWJvdW5jZShhc3luYyAoYWRkcmVzczogc3RyaW5nKTogUHJvbWlzZTx7XHJcbiAgYWRkcmVzc19saW5lMTogc3RyaW5nO1xyXG4gIGFkZHJlc3NfbGluZTI/OiBzdHJpbmc7XHJcbiAgY2l0eTogc3RyaW5nO1xyXG4gIHN0YXRlOiBzdHJpbmc7XHJcbiAgemlwOiBzdHJpbmc7XHJcbiAgbGF0aXR1ZGU/OiBudW1iZXI7XHJcbiAgbG9uZ2l0dWRlPzogbnVtYmVyO1xyXG59IHwgbnVsbD4gPT4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBPbmx5IHByb2NlZWQgaWYgdGhlIGFkZHJlc3MgaXMgY29tcGxldGUgZW5vdWdoXHJcbiAgICBpZiAoIWlzQWRkcmVzc0NvbXBsZXRlKGFkZHJlc3MpKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgIGAke0dFT0NPRElPX0JBU0VfVVJMfT9xPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGFkZHJlc3MpfSZhcGlfa2V5PSR7R0VPQ09ESU9fQVBJX0tFWX1gXHJcbiAgICApO1xyXG4gICAgXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKS5jYXRjaCgoKSA9PiBudWxsKTtcclxuICAgICAgY29uc29sZS5lcnJvcignR2VvY29kaW8gQVBJIGVycm9yOicsIHtcclxuICAgICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyxcclxuICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxyXG4gICAgICAgIGVycm9yOiBlcnJvckRhdGFcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBkYXRhOiBHZW9jb2Rpb1Jlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgXHJcbiAgICBpZiAoIWRhdGEucmVzdWx0cyB8fCBkYXRhLnJlc3VsdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdCA9IGRhdGEucmVzdWx0c1swXTtcclxuICAgIGNvbnN0IGNvbXBvbmVudHMgPSByZXN1bHQuYWRkcmVzc19jb21wb25lbnRzO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGFkZHJlc3NfbGluZTE6IGAke2NvbXBvbmVudHMubnVtYmVyfSAke2NvbXBvbmVudHMuc3RyZWV0fWAsXHJcbiAgICAgIGNpdHk6IGNvbXBvbmVudHMuY2l0eSxcclxuICAgICAgc3RhdGU6IGNvbXBvbmVudHMuc3RhdGUsXHJcbiAgICAgIHppcDogY29tcG9uZW50cy56aXAsXHJcbiAgICAgIGxhdGl0dWRlOiByZXN1bHQubG9jYXRpb24ubGF0LFxyXG4gICAgICBsb25naXR1ZGU6IHJlc3VsdC5sb2NhdGlvbi5sbmdcclxuICAgIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHZlcmlmeWluZyBhZGRyZXNzOicsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufSwgNTAwKTsgLy8gNTAwbXMgZGVib3VuY2UgZGVsYXkgIl0sIm5hbWVzIjpbIkdFT0NPRElPX0FQSV9LRVkiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfR0VPQ09ESU9fQVBJX0tFWSIsIkdFT0NPRElPX0JBU0VfVVJMIiwiZGVib3VuY2UiLCJmdW5jIiwid2FpdCIsInRpbWVvdXQiLCJhcmdzIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImlzQWRkcmVzc0NvbXBsZXRlIiwiYWRkcmVzcyIsInBhcnRzIiwic3BsaXQiLCJtYXAiLCJwYXJ0IiwidHJpbSIsImxlbmd0aCIsImNpdHlTdGF0ZSIsInZlcmlmeUFkZHJlc3MiLCJyZXNwb25zZSIsImZldGNoIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwib2siLCJlcnJvckRhdGEiLCJqc29uIiwiY2F0Y2giLCJjb25zb2xlIiwiZXJyb3IiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsInJlc3VsdHMiLCJyZXN1bHQiLCJjb21wb25lbnRzIiwiYWRkcmVzc19jb21wb25lbnRzIiwiYWRkcmVzc19saW5lMSIsIm51bWJlciIsInN0cmVldCIsImNpdHkiLCJzdGF0ZSIsInppcCIsImxhdGl0dWRlIiwibG9jYXRpb24iLCJsYXQiLCJsb25naXR1ZGUiLCJsbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/geocodio.ts\n"));

/***/ })

});