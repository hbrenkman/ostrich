"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/clients/companies/[id]/edit/page",{

/***/ "(app-pages-browser)/./src/lib/actions/updateContact.ts":
/*!******************************************!*\
  !*** ./src/lib/actions/updateContact.ts ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   updateContactLocation: function() { return /* binding */ updateContactLocation; }\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(app-pages-browser)/./src/lib/supabase.ts\");\n\n// If you had additional imports in your original updateContact.ts, add them here, e.g.:\n// import { someUtility } from '@/utils/helpers';\nconsole.log(\"updateContact.ts: supabaseAdmin imported:\", {\n    hasFrom: !!createSupabaseClient().from,\n    hasAuth: !!createSupabaseClient().auth,\n    hasRpc: !!createSupabaseClient().rpc\n});\nasync function updateContactLocation(contactId, locationId) {\n    console.log(\"Server Action: updateContactLocation\", {\n        contactId,\n        locationId\n    });\n    try {\n        // Update contact's location_id\n        const { data, error } = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contacts\").update({\n            location_id: locationId,\n            updated_at: new Date().toISOString()\n        }).eq(\"id\", contactId).select();\n        if (error) {\n            throw new Error(\"Failed to update contact: \".concat(error.message));\n        }\n        if (!data || data.length === 0) {\n            throw new Error(\"No contact data returned after update\");\n        }\n        console.log(\"Supabase update response:\", data);\n        // Verify the update\n        const updatedContact = await _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(\"contacts\").select(\"id, location_id\").eq(\"id\", contactId).single();\n        if (updatedContact.error || !updatedContact.data) {\n            var _updatedContact_error;\n            throw new Error(\"Failed to verify contact: \".concat(((_updatedContact_error = updatedContact.error) === null || _updatedContact_error === void 0 ? void 0 : _updatedContact_error.message) || \"No contact found\"));\n        }\n        console.log(\"Contact verified:\", updatedContact.data);\n        // Compare location_id, treating null and undefined as equivalent\n        const updatedLocationId = updatedContact.data.location_id;\n        const expectedLocationId = locationId;\n        const isMatch = updatedLocationId === expectedLocationId || updatedLocationId == null && expectedLocationId == null;\n        console.log(\"Location ID comparison:\", {\n            updatedLocationId,\n            expectedLocationId,\n            isMatch\n        });\n        if (!isMatch) {\n            throw new Error(\"Contact location_id mismatch after update\");\n        }\n        console.log(\"Contact assigned successfully:\", {\n            contactId,\n            locationId\n        });\n        return {\n            success: true,\n            contactId,\n            locationId\n        };\n    } catch (error) {\n        console.error(\"Error in updateContactLocation:\", {\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        });\n        throw error;\n    }\n} // If your original updateContact.ts had additional functions or exports, add them here, e.g.:\n // export async function deleteContact(contactId: string) {\n //   // Your code here\n // }\n // export async function updateContactDetails(contactId: string, details: any) {\n //   // Your code here\n // }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvYWN0aW9ucy91cGRhdGVDb250YWN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBRTFDLHdGQUF3RjtBQUN4RixpREFBaUQ7QUFFakRDLFFBQVFDLEdBQUcsQ0FBQyw2Q0FBNkM7SUFDdkRDLFNBQVMsQ0FBQyxDQUFDQyx1QkFBdUJDLElBQUk7SUFDdENDLFNBQVMsQ0FBQyxDQUFDRix1QkFBdUJHLElBQUk7SUFDdENDLFFBQVEsQ0FBQyxDQUFDSix1QkFBdUJLLEdBQUc7QUFDdEM7QUFFTyxlQUFlQyxzQkFBc0JDLFNBQWlCLEVBQUVDLFVBQXlCO0lBQ3RGWCxRQUFRQyxHQUFHLENBQUMsd0NBQXdDO1FBQUVTO1FBQVdDO0lBQVc7SUFFNUUsSUFBSTtRQUNGLCtCQUErQjtRQUMvQixNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTWQsbURBQVFBLENBQ25DSyxJQUFJLENBQUMsWUFDTFUsTUFBTSxDQUFDO1lBQ05DLGFBQWFKO1lBQ2JLLFlBQVksSUFBSUMsT0FBT0MsV0FBVztRQUNwQyxHQUNDQyxFQUFFLENBQUMsTUFBTVQsV0FDVFUsTUFBTTtRQUVULElBQUlQLE9BQU87WUFDVCxNQUFNLElBQUlRLE1BQU0sNkJBQTJDLE9BQWRSLE1BQU1TLE9BQU87UUFDNUQ7UUFFQSxJQUFJLENBQUNWLFFBQVFBLEtBQUtXLE1BQU0sS0FBSyxHQUFHO1lBQzlCLE1BQU0sSUFBSUYsTUFBTTtRQUNsQjtRQUVBckIsUUFBUUMsR0FBRyxDQUFDLDZCQUE2Qlc7UUFFekMsb0JBQW9CO1FBQ3BCLE1BQU1ZLGlCQUFpQixNQUFNekIsbURBQVFBLENBQ2xDSyxJQUFJLENBQUMsWUFDTGdCLE1BQU0sQ0FBQyxtQkFDUEQsRUFBRSxDQUFDLE1BQU1ULFdBQ1RlLE1BQU07UUFFVCxJQUFJRCxlQUFlWCxLQUFLLElBQUksQ0FBQ1csZUFBZVosSUFBSSxFQUFFO2dCQUNIWTtZQUE3QyxNQUFNLElBQUlILE1BQU0sNkJBQWlGLE9BQXBERyxFQUFBQSx3QkFBQUEsZUFBZVgsS0FBSyxjQUFwQlcsNENBQUFBLHNCQUFzQkYsT0FBTyxLQUFJO1FBQ2hGO1FBRUF0QixRQUFRQyxHQUFHLENBQUMscUJBQXFCdUIsZUFBZVosSUFBSTtRQUVwRCxpRUFBaUU7UUFDakUsTUFBTWMsb0JBQW9CRixlQUFlWixJQUFJLENBQUNHLFdBQVc7UUFDekQsTUFBTVkscUJBQXFCaEI7UUFDM0IsTUFBTWlCLFVBQVVGLHNCQUFzQkMsc0JBQ3JCRCxxQkFBcUIsUUFBUUMsc0JBQXNCO1FBRXBFM0IsUUFBUUMsR0FBRyxDQUFDLDJCQUEyQjtZQUNyQ3lCO1lBQ0FDO1lBQ0FDO1FBQ0Y7UUFFQSxJQUFJLENBQUNBLFNBQVM7WUFDWixNQUFNLElBQUlQLE1BQU07UUFDbEI7UUFFQXJCLFFBQVFDLEdBQUcsQ0FBQyxrQ0FBa0M7WUFBRVM7WUFBV0M7UUFBVztRQUV0RSxPQUFPO1lBQ0xrQixTQUFTO1lBQ1RuQjtZQUNBQztRQUNGO0lBQ0YsRUFBRSxPQUFPRSxPQUFPO1FBQ2RiLFFBQVFhLEtBQUssQ0FBQyxtQ0FBbUM7WUFDL0NTLFNBQVNULGlCQUFpQlEsUUFBUVIsTUFBTVMsT0FBTyxHQUFHO1FBQ3BEO1FBQ0EsTUFBTVQ7SUFDUjtBQUNGLEVBRUEsOEZBQThGO0NBQzlGLDJEQUEyRDtDQUMzRCxzQkFBc0I7Q0FDdEIsSUFBSTtDQUNKLGdGQUFnRjtDQUNoRixzQkFBc0I7Q0FDdEIsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvbGliL2FjdGlvbnMvdXBkYXRlQ29udGFjdC50cz80MDgxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSAnQC9saWIvc3VwYWJhc2UnO1xyXG5cclxuLy8gSWYgeW91IGhhZCBhZGRpdGlvbmFsIGltcG9ydHMgaW4geW91ciBvcmlnaW5hbCB1cGRhdGVDb250YWN0LnRzLCBhZGQgdGhlbSBoZXJlLCBlLmcuOlxyXG4vLyBpbXBvcnQgeyBzb21lVXRpbGl0eSB9IGZyb20gJ0AvdXRpbHMvaGVscGVycyc7XHJcblxyXG5jb25zb2xlLmxvZygndXBkYXRlQ29udGFjdC50czogc3VwYWJhc2VBZG1pbiBpbXBvcnRlZDonLCB7XHJcbiAgaGFzRnJvbTogISFjcmVhdGVTdXBhYmFzZUNsaWVudCgpLmZyb20sXHJcbiAgaGFzQXV0aDogISFjcmVhdGVTdXBhYmFzZUNsaWVudCgpLmF1dGgsXHJcbiAgaGFzUnBjOiAhIWNyZWF0ZVN1cGFiYXNlQ2xpZW50KCkucnBjXHJcbn0pO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUNvbnRhY3RMb2NhdGlvbihjb250YWN0SWQ6IHN0cmluZywgbG9jYXRpb25JZDogc3RyaW5nIHwgbnVsbCkge1xyXG4gIGNvbnNvbGUubG9nKCdTZXJ2ZXIgQWN0aW9uOiB1cGRhdGVDb250YWN0TG9jYXRpb24nLCB7IGNvbnRhY3RJZCwgbG9jYXRpb25JZCB9KTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIFVwZGF0ZSBjb250YWN0J3MgbG9jYXRpb25faWRcclxuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXHJcbiAgICAgIC5mcm9tKCdjb250YWN0cycpXHJcbiAgICAgIC51cGRhdGUoe1xyXG4gICAgICAgIGxvY2F0aW9uX2lkOiBsb2NhdGlvbklkLFxyXG4gICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgICB9KVxyXG4gICAgICAuZXEoJ2lkJywgY29udGFjdElkKVxyXG4gICAgICAuc2VsZWN0KCk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHVwZGF0ZSBjb250YWN0OiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY29udGFjdCBkYXRhIHJldHVybmVkIGFmdGVyIHVwZGF0ZScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdTdXBhYmFzZSB1cGRhdGUgcmVzcG9uc2U6JywgZGF0YSk7XHJcblxyXG4gICAgLy8gVmVyaWZ5IHRoZSB1cGRhdGVcclxuICAgIGNvbnN0IHVwZGF0ZWRDb250YWN0ID0gYXdhaXQgc3VwYWJhc2VcclxuICAgICAgLmZyb20oJ2NvbnRhY3RzJylcclxuICAgICAgLnNlbGVjdCgnaWQsIGxvY2F0aW9uX2lkJylcclxuICAgICAgLmVxKCdpZCcsIGNvbnRhY3RJZClcclxuICAgICAgLnNpbmdsZSgpO1xyXG5cclxuICAgIGlmICh1cGRhdGVkQ29udGFjdC5lcnJvciB8fCAhdXBkYXRlZENvbnRhY3QuZGF0YSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB2ZXJpZnkgY29udGFjdDogJHt1cGRhdGVkQ29udGFjdC5lcnJvcj8ubWVzc2FnZSB8fCAnTm8gY29udGFjdCBmb3VuZCd9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0NvbnRhY3QgdmVyaWZpZWQ6JywgdXBkYXRlZENvbnRhY3QuZGF0YSk7XHJcblxyXG4gICAgLy8gQ29tcGFyZSBsb2NhdGlvbl9pZCwgdHJlYXRpbmcgbnVsbCBhbmQgdW5kZWZpbmVkIGFzIGVxdWl2YWxlbnRcclxuICAgIGNvbnN0IHVwZGF0ZWRMb2NhdGlvbklkID0gdXBkYXRlZENvbnRhY3QuZGF0YS5sb2NhdGlvbl9pZDtcclxuICAgIGNvbnN0IGV4cGVjdGVkTG9jYXRpb25JZCA9IGxvY2F0aW9uSWQ7XHJcbiAgICBjb25zdCBpc01hdGNoID0gdXBkYXRlZExvY2F0aW9uSWQgPT09IGV4cGVjdGVkTG9jYXRpb25JZCB8fCBcclxuICAgICAgICAgICAgICAgICAgICAodXBkYXRlZExvY2F0aW9uSWQgPT0gbnVsbCAmJiBleHBlY3RlZExvY2F0aW9uSWQgPT0gbnVsbCk7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0xvY2F0aW9uIElEIGNvbXBhcmlzb246Jywge1xyXG4gICAgICB1cGRhdGVkTG9jYXRpb25JZCxcclxuICAgICAgZXhwZWN0ZWRMb2NhdGlvbklkLFxyXG4gICAgICBpc01hdGNoXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIWlzTWF0Y2gpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb250YWN0IGxvY2F0aW9uX2lkIG1pc21hdGNoIGFmdGVyIHVwZGF0ZScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKCdDb250YWN0IGFzc2lnbmVkIHN1Y2Nlc3NmdWxseTonLCB7IGNvbnRhY3RJZCwgbG9jYXRpb25JZCB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICBjb250YWN0SWQsXHJcbiAgICAgIGxvY2F0aW9uSWRcclxuICAgIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIHVwZGF0ZUNvbnRhY3RMb2NhdGlvbjonLCB7XHJcbiAgICAgIG1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXHJcbiAgICB9KTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG5cclxuLy8gSWYgeW91ciBvcmlnaW5hbCB1cGRhdGVDb250YWN0LnRzIGhhZCBhZGRpdGlvbmFsIGZ1bmN0aW9ucyBvciBleHBvcnRzLCBhZGQgdGhlbSBoZXJlLCBlLmcuOlxyXG4vLyBleHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQ29udGFjdChjb250YWN0SWQ6IHN0cmluZykge1xyXG4vLyAgIC8vIFlvdXIgY29kZSBoZXJlXHJcbi8vIH1cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUNvbnRhY3REZXRhaWxzKGNvbnRhY3RJZDogc3RyaW5nLCBkZXRhaWxzOiBhbnkpIHtcclxuLy8gICAvLyBZb3VyIGNvZGUgaGVyZVxyXG4vLyB9Il0sIm5hbWVzIjpbInN1cGFiYXNlIiwiY29uc29sZSIsImxvZyIsImhhc0Zyb20iLCJjcmVhdGVTdXBhYmFzZUNsaWVudCIsImZyb20iLCJoYXNBdXRoIiwiYXV0aCIsImhhc1JwYyIsInJwYyIsInVwZGF0ZUNvbnRhY3RMb2NhdGlvbiIsImNvbnRhY3RJZCIsImxvY2F0aW9uSWQiLCJkYXRhIiwiZXJyb3IiLCJ1cGRhdGUiLCJsb2NhdGlvbl9pZCIsInVwZGF0ZWRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJlcSIsInNlbGVjdCIsIkVycm9yIiwibWVzc2FnZSIsImxlbmd0aCIsInVwZGF0ZWRDb250YWN0Iiwic2luZ2xlIiwidXBkYXRlZExvY2F0aW9uSWQiLCJleHBlY3RlZExvY2F0aW9uSWQiLCJpc01hdGNoIiwic3VjY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/actions/updateContact.ts\n"));

/***/ })

});